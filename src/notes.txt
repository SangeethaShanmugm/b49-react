{/* <Welcome name="Yogesh" age="20" />
      <Welcome name="Manoj" />
      <Welcome name="Abhijit" /> 


      
//custom component
//1. First letter must be capital
//2. Return only one JSX element


//props =>property
//App -> core component
//JSX => JS XML -> new syntax it looks like html, css
//JSX -> will be converted into JS

//WebPack + Babel => React -> js understandable code
//SPA -> only one html page
//{} => template syntax
//classname -> reserved in JS


{/* <ProfileData
        pic="https://images.pexels.com/photos/771742/pexels-photo-771742.jpeg?cs=srgb&dl=pexels-mohamed-abdelghaffar-771742.jpg&fm=jpg"
        name="Yogesh"
      />
      <ProfileData
        pic="https://media.sproutsocial.com/uploads/2022/06/profile-picture.jpeg"
        name="OmPrakash"
      />
      <ProfileData
        pic="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSzHQv_th9wq3ivQ1CVk7UZRxhbPq64oQrg5Q&usqp=CAU"
        name="Aswin"
      /> */}
      {/* <h1>Hello {name} ðŸ¥³ðŸ¥³ðŸ¥³</h1>
      <h1>Hello {name1} ðŸ¥³ðŸ¥³ðŸ¥³</h1> */}
      {/* {people.map((personName) => (
        <Welcome name={personName} />
      ))} */}



Hooks - function 
----------

useState => destructure 
const [state, setState] = useState(initialValue)
const [like, setLike] = useState(10)

State =>  current situation
State of the art technology => currently which tech is in top
state of mind  => currently running in your mind


// const name = "OmPrakash";
  // const name1 = "Aswin";

  // const people = ["Yogesh", "Manoj", "Abhijit", "Kaushik"];

  // const userList = [
  //   {
  //     pic: "https://images.pexels.com/photos/771742/pexels-photo-771742.jpeg?cs=srgb&dl=pexels-mohamed-abdelghaffar-771742.jpg&fm=jpg",
  //     name: "Yogesh",
  //   },
  //   {
  //     pic: "https://media.sproutsocial.com/uploads/2022/06/profile-picture.jpeg",
  //     name: "OmPrakash",
  //   },
  //   {
  //     pic: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSzHQv_th9wq3ivQ1CVk7UZRxhbPq64oQrg5Q&usqp=CAU",
  //     name: "Aswin",
  //   },
  // ];
  //                0          1         2

   {/* <AddColor /> */}
      {/* {userList.map((usr) => (
        <ProfileData image={usr.pic} name={usr.name} />
      ))} */}



React uses two virtual DOMs to render the user interface. One of them is used to store the current state of the objects and the other to store the previous state of the objects. Whenever the virtual DOM gets updated, react compares the two virtual DOMs and gets to know about which virtual DOM objects were updated. After knowing which objects were updated, react renders only those objects inside the real DOM instead of rendering the complete real DOM. This way, with the use of virtual DOM, react solves the problem of inefficient updating
      
      
C    =>  Create /add/insert  => post
R    =>  get/read            => get    
U    =>  update/edit         => put
D     => delete              => delete 